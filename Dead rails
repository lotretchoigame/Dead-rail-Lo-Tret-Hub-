local WindUI = loadstring(game:HttpGet("https://tree-hub.vercel.app/api/UI/WindUI"))()

function gradient(text, startColor, endColor)
    local result = ""
    local length = #text

    for i = 1, length do
        local t = (i - 1) / math.max(length - 1, 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)

        local char = text:sub(i, i)
        result = result .. "<font color=\"rgb(" .. r ..", " .. g .. ", " .. b .. ")\">" .. char .. "</font>"
    end

    return result
end

local Confirmed = false

WindUI:Popup({
    Title = "Welcome :D",
    Icon = "info",
    Content = "Do you want use this?  " .. gradient("Lo Tret", Color3.fromHex("#00FF87"), Color3.fromHex("#60EFFF")) .. " Lib",
    Buttons = {
        {
            Title = "Cancel ;-;",
            Callback = function() end,
            Variant = "Tertiary",
        },
        {
            Title = "Continue :D",
            Icon = "arrow-right",
            Callback = function() Confirmed = true end,
            Variant = "Primary",
        }
    }
})

repeat wait() until Confirmed

local Window = WindUI:CreateWindow({
    Title = "Lo Tret-Dead Rails",
    Icon = "door-open",
    Author = "Dead Rails",
    Folder = "CloudHub",
    Size = UDim2.fromOffset(320, 200),
    Transparent = true,
    Theme = "Dark",
    UserEnabled = false,
    SideBarWidth = 200,
    HasOutline = true,
})

Window:EditOpenButton({
    Title = "Lo Tret-Dead Rails",
    Icon = "monitor",
    CornerRadius = UDim.new(0,16),
    StrokeThickness = 2,
    Color = ColorSequence.new(
        Color3.fromHex("FF0F7B"), 
        Color3.fromHex("F89B29")
    ),
    Draggable = true,
})

local Tabs = {
    Main = Window:Tab({ Title = "Main Tab", Icon = "type" }),
    Misc = Window:Tab({ Title = "Misc Tab", Icon = "mouse-pointer-2" }),
    Auto = Window:Tab({ Title = "Auto", Icon = "auto" }),
    Esp = Window:Tab({ Title = "Esp", Icon = "paintbrush", Desc = "Tracker" }),
    Visual = Window:Tab({ Title = "Visual", Icon = "bell" }),
    Player = Window:Tab({ Title = "Player", Icon = "toggle-left" }),
    Teleport = Window:Tab({ Title = "Teleport", Icon = "sliders-horizontal" }),
    Show = Window:Tab({ Title = "Show", Icon = "keyboard" }),
    Setting = Window:Tab({ Title = "Setting", Icon = "setting", Desc = "Change Some" }),
    b = Window:Divider(),
    WindowTab = Window:Tab({ Title = "Made By @Lo_Tret_Meme ", Icon = "settings", Desc = "Only Youtube" }),
    be = Window:Divider(),
}

Window:SelectTab(1)

Tabs.Main:Paragraph({
    Title = "Made By Lo Tret",
    Desc = "@Lo_Tret_Meme/Only Youtube",
    Image = "bird",
})

Tabs.Misc:Button({
    Title = "Click Me",
    Desc = "This is a simple button",
    Callback = function() print("Button Clicked!") end
})

Tabs.Auto:Toggle({
    Title = "Auto Grab MoneyBag",
    Default = false,
    Callback = function(state)
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")
        local RANGE = 25

        while state do
            for _, prompt in ipairs(workspace:GetDescendants()) do
                if prompt:IsA("ProximityPrompt") then
                    local part = prompt.Parent
                    if part and part:IsA("BasePart") then
                        local distance = (hrp.Position - part.Position).Magnitude
                        if distance <= RANGE and prompt.Enabled then
                            fireproximityprompt(prompt)
                            wait(0.2)
                        end
                    end
                end
            end
            wait(0.5)
        end
    end
})

Tabs.Esp:Toggle({
    Title = "Esp Item",
    Default = false,
    Callback = function(state) print(tostring(state)) end
})

Tabs.Visual:Toggle({
    Title = "Full Bright",
    Default = false,
    Callback = function(state) print(tostring(state)) end
})

Tabs.Player:Toggle({
    Title = "Noclip",
    Default = false,
    Callback = function(state) print(tostring(state)) end
})

Tabs.Teleport:Button({
    Title = "Teleport To Train",
    Desc = "You Will On Train",
    Callback = function() print("Teleporting...") end
})

Tabs.Show:Toggle({
    Title = "Show Time",
    Default = false,
    Callback = function(state) print(tostring(state)) end
})

Tabs.Setting:Dropdown({
    Title = "Choose a Category",
    Values = { "Category A", "Category B", "Category C" },
    Value = "Category A",
    Callback = function(option) print("Category selected: " .. option) end
})
