local WindUI = loadstring(game:HttpGet("https://tree-hub.vercel.app/api/UI/WindUI"))()

function gradient(text, startColor, endColor)
    local result = ""
    local length = #text
    for i = 1, length do
        local t = (i - 1) / math.max(length - 1, 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)
        local char = text:sub(i, i)
        result = result .. "<font color=\"rgb(" .. r ..", " .. g .. ", " .. b .. ")\">" .. char .. "</font>"
    end
    return result
end

local Confirmed = false
WindUI:Popup({
    Title = "Welcome :D",
    Icon = "info",
    Content = "Do you want use this?  " .. gradient("Lo Tret(Main)", Color3.fromHex("#00FF87"), Color3.fromHex("#60EFFF")) .. " Script",
    Buttons = {
        { Title = "Cancel ;-;", Callback = function() end, Variant = "Tertiary" },
        { Title = "Continue :D", Icon = "arrow-right", Callback = function() Confirmed = true end, Variant = "Primary" }
    }
})
repeat task.wait() until Confirmed

local Window = WindUI:CreateWindow({
    Title = "Lo Tret-Dead Rails",
    Icon = "house",
    Author = "Dead Rails",
    Folder = "CloudHub",
    Size = UDim2.fromOffset(320, 200),
    Transparent = true,
    Theme = "Dark",
    UserEnabled = false,
    SideBarWidth = 200,
    HasOutline = true,
})

Window:EditOpenButton({
    Title = "Lo Tret-Dead Rails",
    Icon = "monitor",
    CornerRadius = UDim.new(0,16),
    StrokeThickness = 2,
    Color = ColorSequence.new(Color3.fromHex("FF0F7B"), Color3.fromHex("F89B29")),
    Draggable = true,
})

local Tabs = {
    Main = Window:Tab({ Title = "Main Tab", Icon = "house" }),
    Misc = Window:Tab({ Title = "Misc Tab", Icon = "mouse-pointer-2" }),
    Auto = Window:Tab({ Title = "Auto", Icon = "bolt" }),
    Esp = Window:Tab({ Title = "Esp", Icon = "eye", Desc = "Tracker" }),
    Visual = Window:Tab({ Title = "Visual", Icon = "layers-2" }),
    Player = Window:Tab({ Title = "Player", Icon = "dna" }),
    Teleport = Window:Tab({ Title = "Teleport", Icon = "sparkles" }),
    Show = Window:Tab({ Title = "Show", Icon = "tv-minimal" }),
    Theme = Window:Tab({ Title = "Theme", Icon = "bolt", Desc = "Set Theme" }),
    Setting = Window:Tab({ Title = "Setting", Icon = "settings", Desc = "Change Some" }),
    b = Window:Divider(),
    WindowTab = Window:Tab({ Title = "Made By @Lo_Tret_Meme ", Icon = "settings", Desc = "Only Youtube" }),
    be = Window:Divider(),
}

Window:SelectTab(1)
Tabs.Main:Paragraph({ Title = "Made By Lo Tret", Desc = "@Lo_Tret_Meme/Only Youtube", Image = "bird" })
Tabs.Misc:Button({ Title = "Click Me", Desc = "This is a simple button", Callback = function() print("Button Clicked!") end })

Tabs.Auto:Toggle({
    Title = "Auto Grab MoneyBag",
    Icon = "circle-dollar-sign", 
    Default = false,
    Callback = function(state)
        if state then
            task.spawn(function()
                local player = game.Players.LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait()
                local hrp = character:WaitForChild("HumanoidRootPart")
                local RANGE = 25
                while state do
                    for _, prompt in ipairs(workspace:GetDescendants()) do
                        if prompt:IsA("ProximityPrompt") then
                            local part = prompt.Parent
                            if part and part:IsA("BasePart") then
                                local distance = (hrp.Position - part.Position).Magnitude
                                local name = part.Name:lower()
                                if distance <= RANGE and prompt.Enabled and (name:find("money") or name:find("cash") or name:find("bag")) then
                                    fireproximityprompt(prompt)
                                    task.wait(0.2)
                                end
                            end
                        end
                    end
                    task.wait(0.5)
                end
            end)
        end
    end
})

local Player = game.Players.LocalPlayer
local Camera = workspace.CurrentCamera
local ESPObjects = {}
local ESPEnabled = false

local function GetTeamColor(targetPlayer)
    return Color3.fromRGB(0, 200, 255)
end

local function CreateESP(targetPlayer)
    if ESPObjects[targetPlayer] then return end
    local Billboard = Instance.new("BillboardGui")
    Billboard.Name = "ESP"
    Billboard.Adornee = targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head")
    Billboard.Size = UDim2.new(0, 200, 0, 50)
    Billboard.StudsOffset = Vector3.new(0, 2, 0)
    Billboard.AlwaysOnTop = true
    Billboard.Parent = game.CoreGui

    local TextLabel = Instance.new("TextLabel")
    TextLabel.BackgroundTransparency = 1
    TextLabel.Size = UDim2.new(1, 0, 1, 0)
    TextLabel.TextColor3 = GetTeamColor(targetPlayer)
    TextLabel.TextStrokeTransparency = 0
    TextLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
    TextLabel.Font = Enum.Font.SourceSansBold
    TextLabel.TextScaled = true
    TextLabel.Parent = Billboard

    ESPObjects[targetPlayer] = { Billboard = Billboard, Label = TextLabel }
end

local function RemoveESP(targetPlayer)
    if ESPObjects[targetPlayer] then
        ESPObjects[targetPlayer].Billboard:Destroy()
        ESPObjects[targetPlayer] = nil
    end
end

local function ClearAllESP()
    for player, _ in pairs(ESPObjects) do
        RemoveESP(player)
    end
end

local function UpdateESP()
    while ESPEnabled do
        for _, player in ipairs(game.Players:GetPlayers()) do
            if player ~= Player then
                if player.Character and player.Character:FindFirstChild("Head") and player.Character:FindFirstChildOfClass("Humanoid") then
                    if not ESPObjects[player] then
                        CreateESP(player)
                    end

                    local esp = ESPObjects[player]
                    if esp and esp.Label then
                        local distance = (Camera.CFrame.Position - player.Character.Head.Position).Magnitude
                        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                        local health = math.floor(humanoid.Health)

                        if health <= 0 then
                            esp.Label.Text = player.Name .. "\nDistance: " .. math.floor(distance) .. " Studs\n[Dead]"
                        else
                            esp.Label.Text = player.Name .. "\nDistance: " .. math.floor(distance) .. " Studs\nHealth: " .. health
                        end

                        esp.Label.TextColor3 = GetTeamColor(player)
                        esp.Billboard.Adornee = player.Character:FindFirstChild("Head")
                    end
                end
            end
        end

        for trackedPlayer, _ in pairs(ESPObjects) do
            if not game.Players:FindFirstChild(trackedPlayer.Name) then
                RemoveESP(trackedPlayer)
            end
        end

        task.wait(0.5)
    end
end

Tabs.Esp:Toggle({
    Title = "Player Esp",
    Default = false,
    Callback = function(state)
        ESPEnabled = state
        if state then
            UpdateESP()
        else
            ClearAllESP()
        end
    end
})

Tabs.Visual:Toggle({
    Title = "Full Bright",
    Default = false,
    Callback = function(state)
        if not _G.FullBrightExecuted then
            _G.FullBrightEnabled = false
            _G.NormalLightingSettings = {
                Brightness = game.Lighting.Brightness,
                ClockTime = game.Lighting.ClockTime,
                FogEnd = game.Lighting.FogEnd,
                GlobalShadows = game.Lighting.GlobalShadows,
                Ambient = game.Lighting.Ambient
            }
            local function enforceLighting()
                game.Lighting.Brightness = 1
                game.Lighting.ClockTime = 12
                game.Lighting.FogEnd = 786543
                game.Lighting.GlobalShadows = false
                game.Lighting.Ambient = Color3.fromRGB(178, 178, 178)
            end
            enforceLighting()
            game.Lighting:GetPropertyChangedSignal("Brightness"):Connect(function()
                if _G.FullBrightEnabled then game.Lighting.Brightness = 1 end
            end)
            game.Lighting:GetPropertyChangedSignal("ClockTime"):Connect(function()
                if _G.FullBrightEnabled then game.Lighting.ClockTime = 12 end
            end)
            game.Lighting:GetPropertyChangedSignal("FogEnd"):Connect(function()
                if _G.FullBrightEnabled then game.Lighting.FogEnd = 786543 end
            end)
            game.Lighting:GetPropertyChangedSignal("GlobalShadows"):Connect(function()
                if _G.FullBrightEnabled then game.Lighting.GlobalShadows = false end
            end)
            game.Lighting:GetPropertyChangedSignal("Ambient"):Connect(function()
                if _G.FullBrightEnabled then game.Lighting.Ambient = Color3.fromRGB(178, 178, 178) end
            end)
            _G.FullBrightExecuted = true
        end

        _G.FullBrightEnabled = state
        if not state then
            local normal = _G.NormalLightingSettings
            game.Lighting.Brightness = normal.Brightness
            game.Lighting.ClockTime = normal.ClockTime
            game.Lighting.FogEnd = normal.FogEnd
            game.Lighting.GlobalShadows = normal.GlobalShadows
            game.Lighting.Ambient = normal.Ambient
        end
    end
})

Tabs.Player:Toggle({
    Title = "Noclip",
    Default = false,
    Callback = function(state)
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        if state then
            _G.NoclipConn = game:GetService("RunService").Stepped:Connect(function()
                for _, part in ipairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end)
        else
            if _G.NoclipConn then
                _G.NoclipConn:Disconnect()
                _G.NoclipConn = nil
            end
            for _, part in ipairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
    end
})

local CameraConnection

Tabs.Player:Toggle({
    Title = "Free Camera",
    Default = false,
    Callback = function(state)
        if state then
            Player.CameraMode = Enum.CameraMode.Classic
            Camera.CameraType = Enum.CameraType.Custom -- Cho phép zoom + tự do
        else
            Player.CameraMode = Enum.CameraMode.LockFirstPerson
            Camera.CameraType = Enum.CameraType.Custom -- Giữ Custom để không lỗi, nhưng vẫn khóa góc nhìn
            Camera.CFrame = CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + Camera.CFrame.LookVector)
        end
    end
})

Tabs.Teleport:Button({ Title = "Teleport To Train", Desc = "You Will On Train", Callback = function() print("Teleporting...") end })

Tabs.OP:Button({
    Title = "Get Horse Class",
    Desc = "Get Horse Class",
    Callback = function()
        local args = { "Horse" }
        local Remote = game:GetService("ReplicatedStorage").Shared.RemotePromise.Remotes
        Remote.C_BuyClass:FireServer(unpack(args))
        task.wait()
        Remote.C_EquipClass:FireServer(unpack(args))
    end
})

Tabs.Show:Toggle({ Title = "Show Time", Default = false, Callback = function(state) print(tostring(state)) end })

local themeValues = {}
for name, _ in pairs(WindUI:GetThemes()) do
    table.insert(themeValues, name)
end

local themeDropdown = Tabs.Theme:Dropdown({
    Title = "Select Theme",
    Multi = false,
    AllowNone = false,
    Value = nil,
    Values = themeValues,
    Callback = function(theme)
        WindUI:SetTheme(theme)
    end
})
themeDropdown:Select(WindUI:GetCurrentTheme())

local currentThemeName = WindUI:GetCurrentTheme()
local themes = WindUI:GetThemes()

local ThemeAccent = themes[currentThemeName].Accent
local ThemeOutline = themes[currentThemeName].Outline
local ThemeText = themes[currentThemeName].Text
local ThemePlaceholderText = themes[currentThemeName].PlaceholderText

function updateTheme()
    WindUI:AddTheme({
        Name = currentThemeName,
        Accent = ThemeAccent,
        Outline = ThemeOutline,
        Text = ThemeText,
        PlaceholderText = ThemePlaceholderText
    })
    WindUI:SetTheme(currentThemeName)
end

local CreateInput = Tabs.Theme:Input({
    Title = "Theme Name",
    Value = currentThemeName,
    Callback = function(name)
        currentThemeName = name
    end
})

Tabs.Theme:Colorpicker({
    Title = "Background Color",
    Default = Color3.fromHex(ThemeAccent),
    Callback = function(color)
        ThemeAccent = color:ToHex()
    end
})

Tabs.Theme:Colorpicker({
    Title = "Outline Color",
    Default = Color3.fromHex(ThemeOutline),
    Callback = function(color)
        ThemeOutline = color:ToHex()
    end
})

Tabs.Theme:Colorpicker({
    Title = "Text Color",
    Default = Color3.fromHex(ThemeText),
    Callback = function(color)
        ThemeText = color:ToHex()
    end
})

Tabs.Theme:Colorpicker({
    Title = "Placeholder Text Color",
    Default = Color3.fromHex(ThemePlaceholderText),
    Callback = function(color)
        ThemePlaceholderText = color:ToHex()
    end
})

Tabs.Theme:Button({
    Title = "Update Theme",
    Callback = function()
        updateTheme()
    end
})

local ToggleTransparency = Tabs.Setting:Toggle({
    Title = "Transparency",
    Callback = function(e)
        Window:ToggleTransparency(e)
    end,
    Value = WindUI:GetTransparency()
})
